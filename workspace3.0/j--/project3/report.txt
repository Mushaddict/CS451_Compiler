1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<< 30-40 >>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<< 4 >>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Long and Double Basic Types): 
This one should edit a lot of files including Type.java, Parser.java and the other two
Literal.javas. In the beginning, when I finish creating the literals, there are some 
difference from the ast and what I compiled. But then it shows that I also have to edit
some of the function in Type.java and Parser.java, which makes the problem to be 
tricky, but I worked out. But th JVariableDeclarator is the most tricky one because 
I have ignored the descriptorFor, which later was asked by someone else in Piazza. 
Overall this is not that hard. 

   Problem 2 (Operators): This one is complicated. First we should edit all the AST 
representations in different java files. After I finished all of those files, I thought 
it's done, but it has a compilation error such as literal ) not sought, then I realized 
it should be parser problem, so I also have to edit parser such as add another level of 
expression in parser, and add some of the operators in parser where it doesnt exit 
before. This one is complicated and spent me a lot of time. 
   
   Problem 3 (Conditional Expression): For this one, first we have to create a new java
class in order to implement a place for conditionalExpression. In this java file, the 
hard part is to make edit some part in parser because you have to edit in conditional
level to let it work. It's not kind of as the same as the other level because it's like
I have to put "QUES" and "COLON" to same space in order to let "if statement" more 
simpler. 

   Problem 4 (Switch Statement): This one is pretty hard because you have to implement
another class in order to get case block stored. I have working on this question for 
like 2 days and almost 5, 6 hours but still can't figure it out. 

   Problem 5 (Do-While Statement): This one is to follow the appendix to fill the 
JDoWhileStatement as JWhileStatement to parser and follow the same structure, then we 
are done. 

   Problem 6 (For Statement): This one is like having the same strucutre as switch, but 
is simpler because if just follow what the appendix has and do not need another block 
to set it done. 

   Problem 7 (Break Statement): This one has the same strucutre as return, except the 
difference is expression or <identifier>. Not spending much time on this. 

   Problem 8 (Continue Statement): Continue is almost the same as break;

   Problem 9 (Exception Handlers): First I thought this is not hard. Just need to create
two java classes then it is done. However, I was stuck on changing the 
JMethodClassification, because in memberDecl in parser, it is not that simple to set 
the THROWS done. Thus, not finished this. 

   Problem 10 (Interface Type Declaration): ...

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   wei yu               grad         understand the appendix, and trying to get the 
                                    logic clearly. 

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.
   
    At first, I thought the problem is not hard. Then I was stuck on Switch for most 
of my time, and the tricky point for this homewrok is, if you cannot get one problem 
done, as long as you keep it in your parser, the others will not work as well. 
And the first time I upload my homework, I can run them locally, but there are no
 points on Gradescope. The professor sais that is an syntax error. I can't find it, 
so I just write whole parser again and upload the question one by one. 
